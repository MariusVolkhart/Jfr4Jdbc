#You can run this locally like followings
#act -W .github/workflows/release-production.yml -e event.json -s MAVEN_GPG_PRIVATE_KEY="$(< gpg.pem)" --secret-file .secrets
name: Deploy Production

on:
  release:
    types:
      - published
    tag:
      - 'v*'

jobs:
# nektos/act does not support Reusable workflow and does not use Reusable workflow for development productivity
  jvm-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          java-package: 'jdk'
          cache: maven

      - name: Test with Maven on JVM
        run: bash bin/test.sh

  native-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PASSWORD: postgres

    steps:
      - uses: actions/checkout@v3
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '11'
          components: 'native-image'

      - name: Test to create native image
        run: |
          bash bin/native-image-test.sh
          ./artifact-test/target/artifact-test
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PASSWORD: postgres

  release:
    needs: [jvm-test, native-test]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        java-package: 'jdk'
        cache: maven
        server-id: 'ossrh'
        server-username: OSSRH_USERNAME
        server-password: OSSRH_PASSWORD
        gpg-passphrase: SIGN_KEY_PASS
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}

    - name: Release Production
      env:
        OSSRH_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.MAVEN_USER_PASSWORD }}
        SIGN_KEY_PASS: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      run: |
        export VERSION=`echo ${{ github.event.release.tag_name }} | awk '{print substr($0, 2)}'`
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        sed -e s/999-SNAPSHOT/${VERSION}/g jfr4jdbc-driver/pom.xml > jfr4jdbc-driver/versionedPom.xml
        mvn -B deploy --no-transfer-progress -DskipTests -f jfr4jdbc-driver/versionedPom.xml
        mkdir release && cp jfr4jdbc-driver/target/*.jar release

    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: Package
        path: release